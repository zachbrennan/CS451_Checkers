/*============================================================*\
Filename : src/fonts.h
Purpose  : Multiplayer, networked Checkers game for CS451.
Authors  : Corwin Belser <cmb539@drexel.edu>
           Zach Brennan  < zab37@drexel.edu>
           Kris Horsey   < kth37@drexel.edu>
           Zach van Rijn < zwv23@drexel.edu>
License  : MIT/X (excl. ext. libs; see respective licenses).
Revision : 20170707
\*============================================================*/

#ifndef SRC_FONTS_H
#define SRC_FONTS_H

/*
* This file defines how ASCII-art fonts will be structured. This
* means you can simply create new "fonts" (in the 'fonts/' dir)
* and use them anywhere.
*/

/*------------------------------------------------------------*/
/* Font size. */

/*
* Each character must have the same dimensions. For now, these
* represent BLOCKS (as in, ASCII characters), but it is possible
* to interpret these as PIXELS (but drawing those fonts by hand
* is a waste of time, and they do not scale well).
*/

#define TALL            10
#define WIDE            10
#define MOVE            1               /* spaces to insert   */

typedef
enum align_t
{
    DEFAULT,                            /* user-supplied      */
    CENTER_X,                           /* center horizontal  */
    CENTER_Y,                           /* center vertical    */
    CENTER_Z,                           /* center both        */
    ALIGN_LT,                           /* window left        */
    ALIGN_RT,                           /* window right       */
    ALIGN_TP,                           /* window top         */
    ALIGN_BM                            /* window bottom      */
} align_t;

/*------------------------------------------------------------*/
/* Color representation. */

/*
* Note: all characters within this font are generated by colors
* { B, E, F } which are (B)ackground, (E)dge, or (F)oreground.
*/

#define B               0
#define E               1
#define F               2

/*
* The characters 'B', 'E', 'F' are difficult to distinguish, so
* let's map them to characters that are a little friendlier.
*/

#define O               B
#define X               E
#define T               F

/*
* In <curses.h> the following colors are provided:
*
*     COLOR_BLACK   0
*     COLOR_RED     1
*     COLOR_GREEN   2
*     COLOR_YELLOW  3
*     COLOR_BLUE    4
*     COLOR_MAGENTA 5
*     COLOR_CYAN    6
*     COLOR_WHITE   7
*
* which fits comfortably in an 8-bit data type. In more general
* applications, other types such as 'unsigned int' can be used
* to obtain full 32-bit color depth. More info:
* http://www.tldp.org/HOWTO/NCURSES-Programming-HOWTO/color.html
*/

typedef unsigned char   color_t;        /* 8-bit colors       */
typedef unsigned char palette_t;        /* 8-bit concurrency  */

/*------------------------------------------------------------*/
/* Font structure. */

/*
* 'triple_t' data structure
* ZB <3
* -------- __@      __@       __@       __@      __~@
* ----- _`\<,_    _`\<,_    _`\<,_     _`\<,_    _`\<,_
* ---- (*)/ (*)  (*)/ (*)  (*)/ (*)  (*)/ (*)  (*)/ (*)
* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
* This defines a triple of 32-bit integers (which are colors) so
* that we can draw each block with its own color palette.
*/

typedef
enum ncolor_t
{
    BGND,
    EDGE,
    FGND
} ncolor_t;

typedef
struct triple_t
{
    color_t b;
    color_t e;
    color_t f;
} triple_t;

/*
* We will have control over the colors of each character printed
* (which use a given color scheme).
*/

typedef
struct block_t
{
    triple_t color;
    palette_t data[TALL][WIDE];
} block_t;

/*------------------------------------------------------------*/
/* Character sets. */

/*
* Which character sets do you want to have to implement? Only if
* you use '1' will it be enabled; all other values are ignored.
*/

#define UC              1               /* (26) UPPERCASE     */
#define LC              0               /* (26) lowercase     */
#define SH              0               /* (10) shift+number  */
#define EX              0               /* (20) special chars */

/*
* How many total characters (given your above settings) do we
* need to allocate memory for?
*/

#define NUM_CHAR        26              /* 26 + 26 + 10 + 20  */

/*
* And finally, in what order do you want to implement them? This
* needs to be followed strictly, and should not be changed once
* at least one font is implemented.
*/

typedef
enum charset_t
{
#if defined(UC) & (UC == 1)
    /*---------------------------------*/
    /* UPPERCASE letters               */
    /*---------------------------------*/

    /* A     B     C     D     E       */
    uc_a, uc_b, uc_c, uc_d, uc_e,
    /* F     G     H     I     J       */
    uc_f, uc_g, uc_h, uc_i, uc_j,
    /* K     L     M     N     O       */
    uc_k, uc_l, uc_m, uc_n, uc_o,
    /* P     Q     R     S     T       */
    uc_p, uc_q, uc_r, uc_s, uc_t,
    /* U     V     W     X     Y     Z */
    uc_u, uc_v, uc_w, uc_x, uc_y, uc_z,
    /*---------------------------------*/
#endif
#if defined(LC) & (LC == 1)
    /*---------------------------------*/
    /* lowercase letters               */
    /*---------------------------------*/

    /* a     b     c     d     e       */
    lc_a, lc_b, lc_c, lc_d, lc_e,
    /* f     g     h     i     j       */
    lc_f, lc_g, lc_h, lc_i, lc_j,
    /* k     l     m     n     o       */
    lc_k, lc_l, lc_m, lc_n, lc_o,
    /* p     q     r     s     t       */
    lc_p, lc_q, lc_r, lc_s, lc_t,
    /* u     v     w     x     y     z */
    lc_u, lc_v, lc_w, lc_x, lc_y, lc_z,
#endif
#if defined(SH) & (SH == 1)
    /*---------------------------------*/
    /* "SHIFT" characters              */
    /*---------------------------------*/

    /*
    * These are obtained by pressing <shift> and some number on
    * your keyboard. For example, 'SHIFT + 4' is '$' which is
    * labeled as 'sh_4'.
    */

    /* !     @     #     $     %       */
    sh_1, sh_2, sh_3, sh_4, sh_5,
    /* ^     &     *     (     )       */
    sh_6, sh_7, sh_8, sh_9, sh_0,
    /*---------------------------------*/
#endif
#if defined(EX) & (EX == 1)
    /*---------------------------------*/
    /* "EXTRA" characters              */
    /*---------------------------------*/

    /*
    * These come in two flavors: XA, XB which refer to the same
    * "key" on the keyboard but one with SHIFT. For example, '/'
    * and '?' come from the same key on the keyboard, and are
    * labeled 'xa_3' and 'xb_3'.
    */

    /* .     ,     /     ;     '       */
    xa_1, xa_2, xa_3, xa_4, xa_5,
    /* [     ]     \     -     =       */
    xa_6, xa_7, xa_8, xa_9, xa_0,
    /* <     >     ?     :     "       */
    xb_1, xb_2, xb_3, xb_4, xb_5,
    /* {     }     |     _     +       */
    xb_6, xb_7, xb_8, xb_9, xb_0,
    /*---------------------------------*/
#endif
} charset_t;

/*------------------------------------------------------------*/
/* Useful macros. */

/*
* Allows you to very cleanly add new "font" structures.
*/

#define ADD_FONT(NAME)                                         \
block_t  font_ ##NAME[NUM_CHAR] =

/*
* Provides access to a given "font" data field; you need to use
* it like a 2D array: 'USE_FONT(foo, bar)[s][t]'.
*/

#define USE_FONT(NAME, USE_CHAR)                               \
font_ ##NAME[USE_CHAR].data

#define USE_COLR(NAME, USE_CHAR)                               \
init_pair(1, font_ ##NAME[USE_CHAR].color.b, COLOR_BLACK);     \
init_pair(2, font_ ##NAME[USE_CHAR].color.e, COLOR_BLACK);     \
init_pair(3, font_ ##NAME[USE_CHAR].color.f, COLOR_BLACK);

#define DBG_COLR(NAME, USE_CHAR)                               \
fprintf(stderr, "COLORS: %d %d %d [%d]\n",                     \
    font_ ##NAME[USE_CHAR].color.b,                            \
    font_ ##NAME[USE_CHAR].color.e,                            \
    font_ ##NAME[USE_CHAR].color.f,                            \
    COLOR_PAIRS                                                \
);

/*------------------------------------------------------------*/
/* Supporting routines. */

void
render(charset_t type);

void
draw_font(int y, int x, char *string, align_t a);

#endif /* SRC_FONTS_H */